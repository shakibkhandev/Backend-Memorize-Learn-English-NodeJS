// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MAINTAINER
  ADMIN
}


model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(ADMIN)
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isEmailVerified Boolean @default(false)
  refreshToken String?
  forgotPasswordCode Int? @unique
  forgotPasswordCodeExpiry DateTime?
  emailVerificationCode Int? @unique
  emailVerificationCodeExpiry DateTime?
  progress    UserProgress?
}

model Lessons {
  id            String         @id @default(uuid())
  title         String        
  description   String?        // Optional description
  createdAt     DateTime       @default(now()) // Track creation date
  updatedAt     DateTime       @updatedAt     // Track updates
  vocabularies  Vocabulary[]
  idioms Idiom[]
  phrasalVerbs PhrasalVerb[]
  paragraph    Paragraph[]
  questions Question[]
  completedBy   UserProgress[]
}



model Question{
  id String @id @default(uuid())
  lessonId String
  lesson Lessons @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  question String
  exampleAnswer String
  createdAt DateTime @default(now())
  
}


model Paragraph {
  id            String         @id @default(uuid())
  title         String         
  lessonId        String
  lesson          Lessons    @relation(fields: [lessonId], references: [id], onDelete: Cascade) // Added cascading delete
  paragraph       String
  createdAt       DateTime   @default(now())
}


model PhrasalVerb {
  id              String     @id @default(uuid())
  lessonId        String
  lesson          Lessons    @relation(fields: [lessonId], references: [id], onDelete: Cascade) // Added cascading delete
  phrasalVerb     String     
  meaning         String
  example         String?    // Example sentence
  createdAt       DateTime   @default(now())
}

model Idiom{
  id String @id @default(uuid())
  lessonId String
  lesson Lessons @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  idiom String
  meaning String
  example String?
  createdAt DateTime @default(now())
}

model Vocabulary {
  id              String     @id @default(uuid())
  lessonId        String
  lesson          Lessons    @relation(fields: [lessonId], references: [id], onDelete: Cascade) // Added cascading delete
  word            String     
  meaning         String
  bengaliMeaning  String
  example         String?    // Example sentence
  createdAt       DateTime   @default(now())

  @@index([word]) // Index for faster word lookups
}

model UserProgress {
  id              String      @id @default(uuid())
  userId          String      @unique
  lessonCompleted Lessons[]   // Lessons completed by user
  lastUpdated     DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade) // Added User relation
  meqSolved MCQ[]
  activeDays DateTime[] @default([])
}



model MCQ{
  id String @id @default(uuid())
  question String
  options String[]
  correctAnswer String
  expandedAnswer String
  solvedBy UserProgress[]
  createdAt DateTime @default(now())
}